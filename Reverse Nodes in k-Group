/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     struct ListNode *next;
 * };
 */

struct ListNode * SizeAndPosition (struct ListNode *head, int pos, int *index) { 
  int idx;
    
  idx =  0;
    
  // lenght of link list
  while (head != NULL) {
    if ((pos != 0) && (pos == idx)) break;      
    head  = head->next;
    idx++;
  }    
 
  if (index != NULL) *index = idx;
    
  return head;
}

void SimpleReverse(struct ListNode **head) {
  struct ListNode* prePtr;
  struct ListNode* fwdPtr;
     
  prePtr  = NULL;
  while ((*head) != NULL) {
    fwdPtr        = (*head)->next;  // fwd  to next
    (*head)->next = (prePtr);       // next to prev
    prePtr        = (*head);        // prev to current
    (*head)       = fwdPtr;         // curr to fwd      
  }

  (*head) = prePtr; 
  return;
}    

struct ListNode*  ReverseK(struct ListNode **head, int k) {
  struct ListNode* curPtr;    
  struct ListNode* lastPtr;    
     
  // find the last pointer in the substring head(k)->next & save
  lastPtr         = SizeAndPosition ((*head), k+1, NULL);    
  curPtr          = SizeAndPosition ((*head), k  , NULL);

  // find the last pointer in the substring head(k)->next & save            
  curPtr->next    = NULL;
    
  // reverse the sub list window
  SimpleReverse(head);    
  
  // reconnect the list at end
  curPtr          = SizeAndPosition ((*head), k  , NULL);    
  curPtr->next    = lastPtr;    
    
  // for convinient debug
  curPtr          = (*head);
    
  // return head for reconection
  return (*head);
}

struct ListNode* reverseKGroup(struct ListNode* head, int k){

  int              idx;    
  int              sLen;
  struct ListNode* curPtr;
  struct ListNode* tmpPtr;    
    
  // input parameter check
  if ((head == NULL) || (k == 1) || (k == 0)) return head;
  if ((head == NULL) || (k < 0)) return NULL;

  
  SizeAndPosition (head, 0, &sLen);
        
  for (idx = 0; idx < (sLen/k); idx++) {    

    curPtr = head;       
    tmpPtr = (idx*k) ? SizeAndPosition (curPtr, (idx*k), NULL) : head;  
    ReverseK (&tmpPtr, k-1);            
      
    if ((idx*k) == 0) { 
      head          = tmpPtr;
    } else {
      curPtr        = SizeAndPosition (head, (idx*k)-1, NULL);
      curPtr->next  =  tmpPtr;
    }      
  }
    
  return head;
}
