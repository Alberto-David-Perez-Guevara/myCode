int max (int numA, int numB, int numC, int numD) {
  int maximum;

  maximum = 0;
    
  maximum = (numA > numB) ? numA:numB;

  if (maximum < numC) {
    maximum = numC;
  }
    
  if (maximum < numD) {
    maximum = numD;
  }
    
  return maximum;
}

int serchGoldDfs (int** grid, int row, int col, int maxrow, int maxcol, int visited[15][15]) {
    
  int up;
  int down;
  int left;
  int right;

  // check edges  
  if ((row < 0) || (col < 0) || (row >= maxrow) || (col >= maxcol)) return 0;

  // check if there is gold
  if (grid[row][col]    == 0) return 0;
    
  // was previously visited?
  if (visited[row][col] == 1) return 0;

  // set visited flag  
  visited[row][col] = 1;
    
  up    = serchGoldDfs(grid, row-1, col, maxrow, maxcol, visited);
  down  = serchGoldDfs(grid, row+1, col, maxrow, maxcol, visited);
  left  = serchGoldDfs(grid, row, col-1, maxrow, maxcol, visited);
  right = serchGoldDfs(grid, row, col+1, maxrow, maxcol, visited);
  // clear visited flag  
  visited[row][col] = 0; 
  return grid[row][col] + max(up, down, left, right); 
}

int getMaximumGold(int** grid, int gridSize, int* gridColSize){

  int row;
  int col;
  int gold;
  int visited[15][15]= {0};

  // check parameters  
  if ((grid == NULL) || (gridSize < 1) || (gridSize > 15) || 
      (*gridColSize < 1) || (*gridColSize > 15)) return 0;
    
  gold = 0;
    
  for (row = 0; row < gridSize; row++) {
    for (col = 0; col < *gridColSize; col++) {
      gold = max(gold, 0, 0, serchGoldDfs(grid, row, col, gridSize, *gridColSize, visited));
    }
  }
    
  return gold;
}

